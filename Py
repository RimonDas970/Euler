# Problem: Capacitance of a System with a Varying Dielectric
import numpy as np

# Constants
epsilon_0 = 8.854e-12  # Permittivity of free space (C^2/(N*m^2))
A = 0.5  # Area of plates in Problem 4 (m^2)

# Define integrand
def integrand_problem(x):
    return epsilon_0 * A * (1 + x**2)

# Numerical integration using the trapezoidal rule for Problem 4
def trapezoidal_rule(func, a, b, n):
    x_values = np.linspace(a, b, n + 1)
    integral = 0.5 * (func(x_values[0]) + func(x_values[-1]))  # First and last terms
    integral += np.sum(func(x_values[1:-1]))  # Middle terms
    return integral * (b - a) / n

# Numerical integration using Simpson's 1/3 rule for Problem 4
def simpsons_rule(func, a, b, n):
    if n % 2 != 0:
        raise ValueError("n must be even")
    x_values = np.linspace(a, b, n + 1)
    integral = func(x_values[0]) + func(x_values[-1])  # First and last terms
    integral += 4 * np.sum(func(x_values[1:-1:2]))  # Odd indexed terms
    integral += 2 * np.sum(func(x_values[2:-2:2]))  # Even indexed terms
    return integral * (b - a) / (3 * n)

# Set the interval and number of intervals for Problem 4
a_capacitance, b_capacitance = 0, 0.1
n_capacitance = 6  # for both trapezoidal and Simpson's rule

# Calculate capacitance C using both methods for Problem 4
C_inv_trapz = trapezoidal_rule(integrand_problem, a_capacitance, b_capacitance, n_capacitance)
C_trapz = 1 / C_inv_trapz

C_inv_simps = simpsons_rule(integrand_problem, a_capacitance, b_capacitance, n_capacitance)
C_simps = 1 / C_inv_simps

# Print capacitance C
print("Problem - Capacitance C:")
print(f"Using Trapezoidal Rule: C = {C_trapz:.2e} F")
print(f"Using Simpson's 1/3 Rule: C = {C_simps:.2e} F")
