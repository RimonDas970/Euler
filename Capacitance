
import numpy as np

# Constants
epsilon_0 = 8.854e-12  # Permittivity of free space (C^2/(N*m^2))
A = 0.5  # Area of plates (m^2)

# Define the integrand
def integrand_problem(x):
    return 1 / (epsilon_0 * A * (1 + x**2))

# Numerical integration using the trapezoidal rule
def capacitance_trapezoidal(a, b, n):
    x_values = np.linspace(a, b, n + 1)
    h = (b - a) / n
    C_inv = (integrand_problem(x_values[0]) + integrand_problem(x_values[-1])) / 2.0
    C_inv += np.sum(integrand_problem(x_values[1:-1]))  # Middle terms
    C_inv *= h
    return C_inv

# Numerical integration using Simpson's 1/3 rule
def capacitance_simpsons(a, b, n):
    if n % 2 == 1:
        n += 1  # Ensure n is even
    x_values = np.linspace(a, b, n + 1)
    h = (b - a) / n
    C_inv = integrand_problem(x_values[0]) + integrand_problem(x_values[-1])  # First and last terms
    C_inv += 4 * np.sum(integrand_problem(x_values[1:-1:2]))  # Odd indexed terms
    C_inv += 2 * np.sum(integrand_problem(x_values[2:-2:2]))  # Even indexed terms
    C_inv *= h / 3
    return C_inv

# Set the interval and number of intervals
a_capacitance, b_capacitance = 0, 0.1
n_capacitance = 4  # Number of intervals for both methods

# Calculate capacitance C using both methods
C_inv_trapz = capacitance_trapezoidal(a_capacitance, b_capacitance, n_capacitance)
C_trapz = 1 / C_inv_trapz

C_inv_simps = capacitance_simpsons(a_capacitance, b_capacitance, n_capacitance)
C_simps = 1 / C_inv_simps

# Print capacitance C
print("Problem - Capacitance C:")
print(f"Using Trapezoidal Rule: C = {C_trapz:.2e} F")
print(f"Using Simpson's 1/3 Rule: C = {C_simps:.2e} F")
